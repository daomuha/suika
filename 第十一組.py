#!/usr/bin/env python
# coding: utf-8

# In[29]:


# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-2ViQteJUduOLq64jGk7A48WU0IiMrxI
"""

# Importing libraries/導入庫(導入Keras庫和包)

import keras

from keras.models import Sequential #用來啟動 NN

from keras.layers import Dense, Dropout, Flatten# Fully Connected Networks

from keras.layers import Conv2D, MaxPooling2D#   Convolution Operation卷積運算

from keras.utils import to_categorical

from keras.preprocessing import image

import numpy as np

import pandas as pd

#import matplotlib.pyplot as plt/將matplotlib.pyplot導入為plt

from sklearn.model_selection import train_test_split

from keras.utils import to_categorical

from tqdm import tqdm

for num in range(300):
    
    train = pd.read_csv('D:/aoi/train.csv ')


    # Reading the training images/閱讀訓練圖像


    train_image = []

    for i in tqdm(range(train.shape[0])):

        img = image.load_img('D:/aoi/train_images/'+train['ID'][i], target_size=(28,28,1), grayscale=True)

        img = image.img_to_array(img)

        img = img/255

        train_image.append(img)

    X = np.array(train_image)

    # Creating the target variable/創建目標變量

    y=train['Label'].values

    y = to_categorical(y)

    # Creating validation set/創建驗證集

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)



    #model = Sequential()  
    #model.add(Conv2D(32, 3, 3, input_shape = (128, 128, 3), activation = 'relu'))
    #model.add(MaxPooling2D(pool_size = (2, 2)))
    # Define the model structure/定義模型結構
    # initializing CNN/初始化CNN
    #搭建第二層與第三層的 Convolutional Layer
    model = Sequential()

    model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(28,28,1)))

    model.add(Conv2D(64, (3, 3), activation='relu'))

    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Dropout(0.25))

    model.add(Flatten())#將 feature maps 攤平放入一個向量中

    #Fully Connected Networks/完全連接的網絡
    model.add(Dense(128, activation='relu'))

    model.add(Dropout(0.5))

    model.add(Dense(6, activation='softmax'))

    # Compile the model/編譯模型(CNN)

    model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

    # Training the model/訓練模型

    model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

test = pd.read_csv('D:/aoi/test.csv')

test_image = []

for i in tqdm(range(test.shape[0])):

    img = image.load_img('D:/aoi/test_images/'+test['ID'][i], target_size=(28,28,1), grayscale=True)

    img = image.img_to_array(img)

    img = img/255

    test_image.append(img)

test = np.array(test_image)

prediction = model.predict_classes(test)



sample = pd.read_csv('D:/aoi/test.csv')


#sample['ID'] = test['ID']/樣品;測試

sample['Label'] = prediction

sample.to_csv('D:/aoi/sample.csv', header=True, index=False)

